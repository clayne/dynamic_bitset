# Inspired by https://github.com/cristianadam/HelloWorld/
name: build and test

on:
  - push
  - pull_request

env:
  CMAKE_VERSION: 3.19.7
  NINJA_VERSION: 1.10.2
  CCACHE_VERSION: 4.2.1

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest - MSVC - Debug",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            build_type: Debug
          }
          - {
            name: "Windows Latest - MSVC - Release",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            build_type: Release
          }
          - {
            name: "Windows Latest - MinGW - Debug",
            os: windows-latest,
            cc: "gcc",
            cxx: "g++",
            build_type: Debug
          }
# Disabled because of https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65782
#          - {
#            name: "Windows Latest - MinGW - Release",
#            os: windows-latest,
#            cc: "gcc",
#            cxx: "g++",
#            build_type: Release
#          }
          - {
            name: "Ubuntu Latest - GCC - Debug",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++",
            build_type: Debug
          }
          - {
            name: "Ubuntu Latest - GCC - Release",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++",
            build_type: Release
          }
          - {
            name: "Ubuntu Latest - Clang - Debug",
            os: ubuntu-latest,
            cc: "clang",
            cxx: "clang++",
            build_type: Debug
          }
          - {
            name: "Ubuntu Latest - Clang - Release",
            os: ubuntu-latest,
            cc: "clang",
            cxx: "clang++",
            build_type: Release
          }
          - {
            name: "macOS Latest - GCC - Debug",
            os: macos-latest,
            cc: "gcc",
            cxx: "g++",
            build_type: Debug
          }
          - {
            name: "macOS Latest - GCC - Release",
            os: macos-latest,
            cc: "gcc",
            cxx: "g++",
            build_type: Release
          }
          - {
            name: "macOS Latest - Clang - Debug",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++",
            build_type: Debug
          }
          - {
            name: "macOS Latest - Clang - Release",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++",
            build_type: Release
          }

    steps:
    - name: Checkout dynamic_bitset
      uses: actions/checkout@v2
      with:
        submodules: recursive
        path: dynamic_bitset

    - name: Download CMake
      id: cmake
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()
        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}/cmake" cmake_binary)
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}/ctest" ctest_binary)
        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND chmod +x ${cmake_binary})
          execute_process(COMMAND chmod +x ${ctest_binary})
        endif()
        message("::set-output name=cmake_binary::${cmake_binary}")
        message("::set-output name=ctest_binary::${ctest_binary}")

    - name: Download Ninja
      id: ninja
      shell: cmake -P {0}
      run: |
        set(ninja_version $ENV{NINJA_VERSION})
        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
        endif()
        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ninja" ninja_binary)
        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND chmod +x ${ninja_binary})
        endif()
        message("::set-output name=ninja_binary::${ninja_binary}")

    - name: Download ccache
      id: ccache
      shell: cmake -P {0}
      run: |
        set(ccache_url "https://github.com/cristianadam/ccache/releases/download/v$ENV{CCACHE_VERSION}/${{ runner.os }}.tar.xz")
        file(DOWNLOAD "${ccache_url}" ./ccache.tar.xz SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ccache.tar.xz)
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/ccache" ccache_binary)
        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND chmod +x ${ccache_binary})
        endif()
        message("::set-output name=ccache_binary::${ccache_binary}")

    - name: Configure ccache
      id: configure_ccache
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}" ccache_basedir)
        file(APPEND "$ENV{GITHUB_ENV}" "CCACHE_BASEDIR=${ccache_basedir}\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CCACHE_DIR=${ccache_basedir}/.ccache\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CCACHE_COMPRESS=true\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CCACHE_COMPRESSLEVEL=6\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CCACHE_MAXSIZE=400M\n")
        execute_process(COMMAND ${{ steps.ccache.outputs.ccache_binary }} -p)
        execute_process(COMMAND ${{ steps.ccache.outputs.ccache_binary }} -z)
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: Cache ccache files
      uses: actions/cache@v2
      with:
        path: .ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.configure_ccache.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Prepare build environment
      shell: cmake -P {0}
      run: |
        file(APPEND "$ENV{GITHUB_ENV}" "CC=${{ matrix.config.cc }}\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CXX=${{ matrix.config.cxx }}\n")
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}\n")

    - name: Configure
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        execute_process(
          COMMAND ${{ steps.cmake.outputs.cmake_binary }}
            -S $ENV{GITHUB_WORKSPACE}/dynamic_bitset
            -B $ENV{GITHUB_WORKSPACE}/dynamic_bitset/build
            -D CMAKE_CONFIGURATION_TYPES=${{ matrix.config.build_type }}
            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=${{ steps.ninja.outputs.ninja_binary }}
            -D CMAKE_C_COMPILER_LAUNCHER=${{ steps.ccache.outputs.ccache_binary }}
            -D CMAKE_CXX_COMPILER_LAUNCHER=${{ steps.ccache.outputs.ccache_binary }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        execute_process(
          COMMAND ${{ steps.cmake.outputs.cmake_binary }}
            --build $ENV{GITHUB_WORKSPACE}/dynamic_bitset/build
            --config ${BUILD_TYPE}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        execute_process(COMMAND ${{ steps.ccache.outputs.ccache_binary }} -s)

    - name: Run tests
      shell: cmake -P {0}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)
        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
        execute_process(
          COMMAND ${{ steps.cmake.outputs.ctest_binary }} --output-on-failure --parallel ${N}
          WORKING_DIRECTORY $ENV{GITHUB_WORKSPACE}/dynamic_bitset/build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
